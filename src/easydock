#!/usr/bin/env bash

set -e

#################################################
# Easydock                                      #
# https://github.com/joglomedia/easydock-linux/  #
#################################################


SOURCE="${BASH_SOURCE[0]}"

# If the current source is a symbolic link, we need to resolve it to an
# actual directory name. We'll use PHP to do this easier than we can
# do it in pure Bash. So, we'll call into PHP CLI here to resolve.
if [[ -L ${SOURCE} ]]
then
    DIR=$(php -r "echo dirname(realpath('${SOURCE}'));")
else
    DIR="$( cd "$( dirname "${SOURCE}" )" && pwd )"
fi

# If we are in the global Composer "bin" directory, we need to bump our
# current directory up two, so that we will correctly proxy into the
# EasyDock src which is written in bash. Will use PHP to do it.
if [[ ! -f "${DIR}/src/.easydock" ]]
then
    DIR=$(php -r "echo realpath('${DIR}/../joglomedia/easydock-linux');")
fi

############################################################ COMMON VARS
menu=$1
action=$2
reset=$(tput sgr0)
br="\n"
bold=$(tput bold)
underline=$(tput smul)
black=$(tput setaf 0)
white=$(tput setaf 7)
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
purple=$(tput setaf 5)
bgblack=$(tput setab 0)
bgwhite=$(tput setab 7)
bgred=$(tput setab 1)
bggreen=$(tput setab 2)
bgyellow=$(tput setab 3)
bgblue=$(tput setab 4)
bgpurple=$(tput setab 5)

############################################################ LOGO
function ed_logo() {
    echo "${yellow}${bold}"
    echo "******************************************************"
    echo "                           _            _      __   "
    echo "   ___  __ _ ___ _   _  __| | ___   ___| | __  \ \  "
    echo "  / _ \/ _' / __| | | |/ _' |/ _ \ / __| |/ / (_) | "
    echo " |  __/ (_| \__ \ |_| | (_| | (_) | (__|   <   _| | "
    echo "  \___|\__,_|___/\__, |\__,_|\___/ \___|_|\_\ ( ) | "
    echo "                 |___/                        |/_/  "
    echo ""
    echo "******************************************************"
    echo -e "${reset}${br}"
}

############################################################ DEPENDENCIES CHECK
function ed_dependencies() {
    local msg=''

    for cmd in "docker" "docker-compose" "certutil"; do
        local str=''

        if ! [[ -x "$(command -v ${cmd})" ]]; then
            printf -v str " - %s\n" "${cmd}"
            local msg+="${str}"
        fi
    done

    if [[ $msg != '' ]]; then
        echo -e "${bgwhite}${red}${bold} >>> ERROR! ${reset} To run easydock you have to install Docker and Docker Compose.\n"
        echo "$msg"
        echo -e "\nPlease refer to https://www.docker.com/products/docker-desktop ${reset}${br}"
        exit 1
    fi
}

############################################################ VENDOR EXPORT
function ed_export() {
    clear
    ed_logo
    echo -e "${blue}Wait...${br}${reset}"
    clear
    ed_logo
    unlink ./.env.easydock
    cp "${DIR}/src/.env.easydock" ./.env.easydock
    unlink ./docker-compose.yml
    cp "${DIR}/src/docker-compose.yml" ./docker-compose.yml
    #unlink ./ed
    #cp "${DIR}/src/.easydock" ./ed
    sed -i -e 's/APP_SID=easydock/APP_SID=easydock'$(((RANDOM%1000000000)+1))'/g' .env.easydock
    # Update ED src dir
    sed -i -e "s/ED_DIR=joglomedia\/easydock-linux/ED_DIR=${DIR}/g" .env.easydock
    #unlink ./.env.easydock-e
    clear
    ed_logo
    echo -e "${bgpurple}${white} easydock is ready! All you have to do is compile your ${bold}.env.easydock${reset}${bgpurple}${white} file and run ${bold}bash easydock setup${reset}${bgpurple}${white} ${br}${reset}"
}

############################################################ ENV FILE MANAGER
function ed_env() {
    clear
    ed_logo
    echo -e "${blue}Wait...${br}${reset}"
    clear
    ed_logo
    if test -f "./.env.easydock"; then
        echo -e "${bgyellow}${black}${bold} >>> WARNING! ${reset} an .env.easydock file is located in your workspace. Delete it if you want regenerate it within this command. ${reset}${br}"
    else
        cp "${DIR}/src/.env.easydock" ./.env.easydock
        sed -i -e 's/APP_SID=easydock/APP_SID=easydock'$(((RANDOM%1000000000)+1))'/g' .env.easydock
        #unlink ./.env.easydock-e
        clear
        ed_logo
        echo -e "${bgpurple}${white} Your ${bold}.env.easydock${reset}${bgpurple}${white} has been created ${br}${reset}"
    fi
}

############################################################ COMMON FUNCTIONS

function ed_notfound() {
    command="$1"
    clear
    ed_logo
    echo -e "${bgwhite}${red}${bold} >>> ERROR! ${reset} Command ${bgred}${white}${bold} bash easydock $command ${reset} is not a valid option. Run ${bgred}${white}${bold} bash easydock help ${reset} to obtain a list of valid options. ${reset}${br}"
}

function ed_isthisportfree() {
    port="$1"
    check=$(lsof -i "tcp:${port}")
    if [ -z "$check" ]; then
        return 0
    else
        return 1
    fi
}

function ed_unavailableport() {
    port=$1
    echo -e "${bgwhite}${red}${bold} >>> ERROR! ${reset} Port: ${bgred}${white}${bold} $port ${reset} is used. Try another port. ${reset}${br}"
    exit
}

function ed_availableport() {
    port=$1
    echo "${green}$port is available!${reset}"
}

function ed_checkingport() {
    port=$1
    echo -e "${br}${blue}Checkin port $port...${reset}"
}

function ed_portscheck() {
    ed_checkingport "${ed_portapp}"
    if ed_isthisportfree "${ed_portapp}"; then
        ed_availableport "${ed_portapp}"
    else
        ed_unavailableport "${ed_portapp}"
    fi
    ed_checkingport "${ed_portdb}"
    if ed_isthisportfree "${ed_portdb}"; then
        ed_availableport "${ed_portdb}"
    else
        ed_unavailableport "${ed_portdb}"
    fi
    ed_checkingport "${ed_portpma}"
    if ed_isthisportfree "${ed_portpma}"; then
        ed_availableport "${ed_portpma}"
    else
        ed_unavailableport "${ed_portpma}"
    fi
    ed_checkingport "${ed_portmh}"
    if ed_isthisportfree "${ed_portmh}"; then
        ed_availableport "${ed_portmh}"
    else
        ed_unavailableport "${ed_portmh}"
    fi
    ed_checkingport "${ed_portrds}"
    if ed_isthisportfree "${ed_portrds}"; then
        ed_availableport "${ed_portrds}"
    else
        ed_unavailableport "${ed_portrds}"
    fi
}

############################################################ CLI FUNCTIONS

function ed_help() {
    echo -e "${bgpurple}${white}${bold} easydock Options List ${reset}${br}${br}"
    echo "${bgwhite}${black} bash easydock setup ${reset}"
    echo -e "Useful to bootstrap and init easydock system.${br}"
    echo "${bgwhite}${black} bash easydock up ${reset}"
    echo -e "Useful to start easydock system.${br}"
    echo "${bgwhite}${black} bash easydock down ${reset}"
    echo -e "Useful to stop easydock system.${br}"
    echo "${bgwhite}${black} bash easydock conn ${reset}"
    echo -e "Useful to SSH into easydock system.${br}"
    echo "${bgwhite}${black} bash easydock reset ${reset}"
    echo -e "Useful to reset easydock system.${br}"
    echo "${bgwhite}${black} bash easydock info ${reset}"
    echo -e "Useful to get easydock configuration information.${br}${br}"
}

function ed_info() {
    echo -e "${bgpurple}${white}${bold} easydock System Information ${reset}${br}"
    echo "NAME: ${ed_appsid}"
    echo "PATH: ${ed_appsrc}"
    echo "DOCUMENT ROOT: /var/www/public"
    echo "CATCH ALL FILE: index.php"
    if [ "${ed_portapp}" == "80" ]; then
        echo "HOST: http://localhost"
    else
        echo "HOST: http://localhost:${ed_portapp}"
    fi
    echo -e "STACK: php:${ed_phpver} / mariadb ${br}"
    echo "${bold}MYSQL${reset}"
    echo "HOST: mysql:3306 (int) / 127.0.0.1:${ed_portdb} (ext)"
    echo "NAME: ${ed_dbname}"
    echo "USER: root"
    echo -e "PASS: ${ed_dbpass} ${br}"
    echo "${bold}SMTP${reset}"
    echo "HOST: mailhog"
    echo "PORT: 1025"
    echo "USER: ${underline}not required${reset}"
    echo -e "PASS: ${underline}not required${reset}${br}"
    echo "${bold}SERVICE${reset}"
    echo "phpmyadmin                 http://localhost:${ed_portpma}"
    echo -e "Mail Hog                   http://localhost:${ed_portmh} ${br}"
}

function ed_reset() {
    read -r -p "Are you sure to reset easydock (this command will reset container and database)? (Y/n): " -n 1 -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${br}${br}${blue}Wait...${br}${reset}"
        clear
        ed_logo
        docker-compose --env-file ./.env.easydock down -v
        docker-compose --env-file ./.env.easydock rm
        clear
        ed_logo
        rm -rf "${DIR}"/data/*
        cp "${DIR}/src/.gitignore.dist" "${DIR}/data/.gitignore"
        ed_logo
        echo "${bgpurple}${white} easydock has been reset! ${reset}"
    fi
    echo -e ${br}
}

function ed_up() {
    echo -e "${blue}Wait...${br}${reset}"
    sleep 1s
    clear
    docker-compose --env-file ./.env.easydock down
    clear
    ed_logo
    ed_portscheck
    clear
    ed_logo
    docker-compose --env-file ./.env.easydock up -d --force-recreate
    clear
    ed_logo
    if [ "${ed_portapp}" == "80" ]; then
        echo -e "${bgpurple}${white} easydock has been started... visit ${bold}${underline}http://localhost${reset}${bgpurple}${white} ${reset}${br}"
    else
        echo -e "${bgpurple}${white} easydock has been started... visit ${bold}${underline}http://localhost:$ed_portapp${reset}${bgpurple}${white} ${reset}${br}"
    fi
}

function ed_down() {
    read -r -p "Are you sure to stop easydock? (Y/n): " -n 1 -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${br}${br}${blue}Wait...${br}${reset}"
        docker-compose --env-file ./.env.easydock down
        clear
        ed_logo
        echo "${bgpurple}${white} easydock has been stopped! ${reset}"
    fi
    echo -e ${br}
}

function ed_conn() {
    echo -e "${blue}Wait... ${reset}${br}"
    sleep 1s
    clear
    ed_logo
    echo -e "${bgblue}${white} Container CLI ${reset}${br}"
    echo -e "Run ${bgwhite}${black} exit ${reset} to return on your device CLI.${br}"
    docker-compose --env-file ./.env.easydock exec app /bin/bash
}

function ed_shell() {
    ed_conn
}

function ed_setup() {
    ed_portscheck
    echo -e "${blue}Wait... ${reset}${br}"
    sleep 1s
    clear
    ed_logo
    echo -e "${bgblue}${white} Pulling Docker images ${reset}${br}"
    docker-compose --env-file ./.env.easydock build --no-cache --pull
    clear
    ed_logo
    echo "${bgpurple}${white} easydock is ready! Run ${bgwhite}${black} bash easydock up ${reset}"
}

############################################################ CLI MENU
function ed_cli_menu() {
    while [ -n "${menu}" ]; do
        case ${menu} in
        help)
            shift
            ed_help
            exit
            ;;
        info)
            shift
            ed_info
            exit
            ;;
        setup)
            shift
            ed_setup
            exit
            ;;
        reset)
            shift
            ed_reset "${action}"
            exit
            ;;
        up)
            shift
            ed_up
            exit
            ;;
        down)
            shift
            ed_down
            exit
            ;;
        conn)
            shift
            ed_conn
            exit
            ;;
        shell)
            shift
            ed_shell
            exit
            ;;
        env)
            shift
            ed_env
            exit
            ;;
        export)
            shift
            ed_export
            exit
            ;;
        *)
            shift
            ed_notfound "${menu}"
            exit -1
            ;;
        esac
        shift
    done
}

function ed_init() {
    if test -f "./.env.easydock"; then
        clear
        ed_logo
    else
        clear
        ed_logo
        echo -e "${bgwhite}${red}${bold} >>> ERROR! ${reset} File ${bgred}${white}${bold} .env.easydock ${reset} is missing. Run ${bgred}${white}${bold} bash easydock env ${reset} to generate it. ${reset}${br}"
        exit
    fi

    ed_portapp=$(grep APP_PORT ./.env.easydock | cut -d '=' -f2)
    ed_portdb=$(grep DB_PORT ./.env.easydock | cut -d '=' -f2)
    ed_portpma=$(grep PMA_PORT ./.env.easydock | cut -d '=' -f2)
    ed_portmh=$(grep MH_PORT ./.env.easydock | cut -d '=' -f2)
    ed_portrds=$(grep RDS_PORT ./.env.easydock | cut -d '=' -f2)
    ed_appsid=$(grep APP_SID ./.env.easydock | cut -d '=' -f2)
    ed_appsrc=$(grep APP_SRC ./.env.easydock | cut -d '=' -f2)
    ed_phpver=$(grep PHP_V ./.env.easydock | cut -d '=' -f2)
    ed_dbver=$(grep DB_VERS ./.env.easydock | cut -d '=' -f2)
    ed_dbname=$(grep DB_NAME ./.env.easydock | cut -d '=' -f2)
    ed_dbpass=$(grep DB_PASS ./.env.easydock | cut -d '=' -f2)
    ed_nginx=$(grep NGINX_MODE ./.env.easydock | cut -d '=' -f2)

    ed_cli_menu "$@"
}

ed_init "$@"